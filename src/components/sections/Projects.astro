---
import Git from "@/icons/git.astro";
import Arrow from "@/icons/Arrow.astro";
import Section from "../Section.astro";

import { projects } from "@cv";
---

<Section className={Astro.props.className} title="Projects">
	<div class="grid grid-cols-1 gap-4 md:grid-cols-2 print:flex print:flex-col">
		{
			projects.map(({ url, description, highlights, name, isActive, github }) => {
				return (
					<div role="contentinfo" class="project-card grid-span-1 ring-skin-muted relative flex flex-col rounded-lg bg-skin-button-muted/50 p-6 shadow-md ring-1 transition-all duration-300 hover:shadow-lg hover:scale-[1.02]">
						<div class="flex items-center justify-between space-x-[10px] mb-3">
							<div class="flex items-center gap-2">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-folder size-5 text-skin-hue">
									<path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z" />
								</svg>
								<h3 class="text-xl font-semibold text-skin-base">{name}</h3>
							</div>
							{github && (
								<a href={github} title="View repository on GitHub" target="_blank" rel="noopener" class="text-skin-muted hover:text-skin-hue transition-colors duration-300">
									<Git class="w-6 h-6" />
								</a>
							)}
						</div>

						<p class="text-sm text-skin-base mb-4">{description}</p>
						<ul class="mb-4 text-sm text-skin-muted space-y-1">
							{highlights.map((highlight) => (
								<li class="flex items-center">
									<span class="mr-2">â€¢</span>
									{highlight}
								</li>
							))}
						</ul>

						<div class="mt-auto flex justify-between items-center">
							{isActive && (
								<a
									class="group inline-flex items-center gap-2 px-3 py-1.5 text-sm bg-skin-button-accent text-skin-inverted rounded-md transition-colors duration-300 hover:bg-skin-button-accent-hover"
									href={url}
									title={`View ${name}`}
									target="_blank"
								>
									View Project
									<Arrow class="w-3 h-3 transition-transform duration-300 group-hover:translate-x-1" />
								</a>
							)}
						</div>
					</div>
				);
			})
		}
	</div>
</Section>

<style>
	ul {
		@apply ml-4 list-none;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	[role="contentinfo"] {
		animation: fadeIn 0.5s ease-out;
	}

	.project-card {
		position: relative;
		overflow: hidden;
		transition: all 0.3s ease;
	}

	.project-card::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: radial-gradient(
			circle at var(--mouse-x, 50%) var(--mouse-y, 50%), 
			rgba(200, 180, 255, 0.8) 0%, 
			rgba(200, 180, 255, 0) 50%
		);
		opacity: 0;
		transition: opacity 0.3s ease;
		pointer-events: none;
		z-index: 0;
	}

	.project-card:hover::before {
		opacity: 1;
	}

	.project-card > * {
		position: relative;
		z-index: 1;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const projectCards = document.querySelectorAll('.project-card');
		
		projectCards.forEach(card => {
			card.addEventListener('mousemove', (e) => {
				const rect = card.getBoundingClientRect();
				const x = e.clientX - rect.left;
				const y = e.clientY - rect.top;
				
				card.style.setProperty('--mouse-x', `${x}px`);
				card.style.setProperty('--mouse-y', `${y}px`);
			});
		});
	});
</script>
