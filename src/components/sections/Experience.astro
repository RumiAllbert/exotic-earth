---
import Section from "../Section.astro"
import { work } from "@cv"
import { Icon } from 'astro-icon/components'
import { iconMap } from "./Skills.astro"

type IconMap = {
  [key: string]: string;
};

// Add this type definition
type WorkItem = {
  name: string;
  position: string;
  location_type: string;
  location: string;
  url?: string;
  startDate: string;
  endDate: string | null;
  summary: string | string[];
  highlights: string[];
  responsibilities?: string[];
  achievements?: string[];
  skills: string[];
};

function getIconName(keyword: string) {
	const lowercaseKeyword = keyword.toLowerCase().replace(/\s+/g, '');
	console.log(`Lowercase Keyword: ${lowercaseKeyword}`); // Debugging
	const iconName = (iconMap as IconMap)[lowercaseKeyword];
	console.log(`Icon Name: ${iconName}`); // Debugging
	return iconName || null;
}
---
<Section className={Astro.props.className} title="Experience">
  <ul class="flex flex-col">
    {(work as WorkItem[]).map(({ name, startDate, endDate, position, summary, highlights, responsibilities, achievements, url, skills, location, location_type }) => {
      const startYear = new Date(startDate).getFullYear()
      const endYear = endDate != null ? new Date(endDate).getFullYear() : "Present"
      const hasExpandableContent = (highlights?.length > 0 || (responsibilities && responsibilities?.length > 0) || (achievements && achievements?.length > 0) || skills?.length > 0)

      return (
        <li class="relative print:py-2" x-data="{ expanded: false }">
          <div class="group relative grid pb-1 print:pb-0 transition-all print:grid-cols-1 print:gap-1 sm:grid-cols-12 sm:gap-8 md:gap-6 lg:hover:!opacity-100">
            <header class="relative mt-1 text-xs font-semibold sm:col-span-2">
              <time datetime={startDate} data-title={startDate}>{startYear}</time> - <time datetime={endDate} data-title={endDate}>{endYear}</time>
            </header>
            <div class="relative flex flex-col pb-6 print:pb-0 before:-ml-6 sm:col-span-10 before:w-px print:before:hidden before:absolute before:bg-skin-muted before:h-full before:mt-2">
              <div class="absolute w-2 h-2 bg-skin-muted rounded-full mt-2 -translate-x-[1.71rem] ring print:hidden ring-skin-fill"></div>
              <div class="flex items-center justify-between">
                <h3>
                  <div class="inline-flex items-center text-lg print:text-base leading-tight group/link focus-visible:text-amber-500">
                    <span>{position} <span>@</span> 
                    {url ? (
                      <a class="text-skin-hue" href={url} title={`Ver ${name}`} target="_blank">{name}</a>
                    ) : (
                      <span>{name}</span>
                    )}
                    {url &&
                      <span class="inline-block text-skin-hue print:[&>svg]:hidden">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="inline-block w-4 h-4 ml-1 transition-transform translate-y-px shrink-0 group-hover/link:-translate-y-1 group-hover/link:translate-x-1 group-focus-visible/link:-translate-y-1 group-focus-visible/link:translate-x-1 motion-reduce:transition-none" aria-hidden="true">
                          <path fill-rule="evenodd" d="M5.22 14.78a.75.75 0 001.06 0l7.22-7.22v5.69a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75h-7.5a.75.75 0 000 1.5h5.69l-7.22 7.22a.75.75 0 000 1.06z" clip-rule="evenodd"></path>
                        </svg>
                      </span>
                    }
                    </span>
                  </div>
                </h3>
                {hasExpandableContent && (
                  <button 
                    @click="expanded = !expanded" 
                    class="text-skin-muted hover:text-skin-base transition-colors duration-200 print:hidden"
                    :aria-expanded="expanded"
                    aria-label="Toggle details"
                  >
                    <svg 
                      xmlns="http://www.w3.org/2000/svg" 
                      class="h-5 w-5 transition-transform duration-200"
                      :class="{ 'rotate-180': expanded }"
                      fill="none" 
                      viewBox="0 0 24 24" 
                      stroke="currentColor"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                )}
              </div>
              {(location || location_type) && (
                <div class="text-xs text-skin-muted mb-2">
                  {location} {location && location_type && '-'} {location_type}
                </div>
              )}
              
              {/* Summary is always visible */}
              {summary && (
                <div class="text-sm text-skin-muted mt-2">
                  {Array.isArray(summary) ? (
                    <ul class="[&>li]:ml-4 flex list-disc flex-col gap-2">
                      {summary.map(item => (
                        <li>{item}</li>
                      ))}
                    </ul>
                  ) : (
                    <p>{summary}</p>
                  )}
                </div>
              )}
              
              {/* Expandable content */}
              {hasExpandableContent && (
                <div 
                  x-show="expanded"
                  x-collapse
                  x-cloak
                  class="mt-4 print:block flex flex-col gap-4 print:text-xs text-sm border-t border-skin-muted/20 pt-4"
                >
                  {highlights && highlights.length > 0 && (
                    <div class="flex flex-col gap-1">
                      <h4 class="font-medium text-skin-base">Highlights:</h4>
                      <ul class="text-skin-muted [&>li]:ml-4 flex list-disc flex-col gap-2">
                        {highlights.map(highlight => (
                          <li>{highlight}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {(responsibilities || achievements) && (
                    <div class="flex relative flex-col max-sm:!h-auto print:!h-auto gap-4 print:gap-2">
                      {responsibilities && responsibilities.length > 0 && (
                        <div class="flex flex-col gap-1">
                          <h4 class="font-medium text-skin-base">Responsibilities:</h4>
                          <ul class="text-skin-muted [&>li]:ml-4 flex list-disc flex-col gap-2">
                            {responsibilities.map(responsibility => (
                              <li>{responsibility}</li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {achievements && achievements.length > 0 && (
                        <div class="flex flex-col gap-1">
                          <h4 class="font-medium text-skin-base">Achievements:</h4>
                          <ul class="text-skin-muted [&>li]:ml-4 flex list-disc flex-col gap-2">
                            {achievements.map((achievement: string) => (
                              <li>{achievement}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  )}

                  {skills && skills.length > 0 && (
                    <div class="flex flex-col gap-1">
                      <h4 class="font-medium text-skin-base">Technologies:</h4>
                      <ul class="flex print:hidden flex-wrap gap-2" aria-label="Technologies used">
                        {skills.map(skill => {
                          const iconName = getIconName(skill);
                          return (
                            <li class="skill-item bg-skin-button-accent/20 border-skin-hue/20 text-skin-hue print:p-0 print:bg-transparent print:text-zinc-800 flex gap-1 items-center border-solid print:border-none border rounded-md px-2 py-0.5 text-xs">
                              {iconName && <Icon name={iconName} class="w-4 h-4" />}
                              <span>{skill}</span>
                            </li>
                          )
                        })}
                      </ul>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </li>
      )
    })}
  </ul>  
</Section>
<script is:inline defer src="https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js"></script>
<script is:inline defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<style>
  [x-cloak] { display: none !important; }
  
  li::marker {
    @apply text-skin-hue
  }

  .skill-item {
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .skill-item::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #3b82f6, #8b5cf6, #6366f1, #3b82f6);
    z-index: -1;
    filter: blur(8px);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .skill-item:hover {
    transform: scale(1.05) translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    color: #ffffff;
    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
  }

  .skill-item:hover::before {
    opacity: .7;
    background-position: var(--x, 0) var(--y, 0);
    transition: background-position 0.3s ease;
  }
</style>

<script>
  document.querySelectorAll('.skill-item').forEach(item => {
    item.addEventListener('mousemove', ((e: MouseEvent) => {
      const rect = item.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      (item as HTMLElement).style.setProperty('--x', `${x}px`);
      (item as HTMLElement).style.setProperty('--y', `${y}px`);
    }) as EventListener);
  });
</script>