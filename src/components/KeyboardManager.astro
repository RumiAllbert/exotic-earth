---
import "hotkeypad/reset.css";
import "hotkeypad/index.css";
import { type SocialIcon } from "@/types";
import { basics } from "@cv";

const { profiles, email } = basics;

const SOCIAL_ICONS: SocialIcon = {
	GitHub: `<svg
  width="16"
  height="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><path
    fill="currentColor"
    d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
  ></path></svg
>`,
	LinkedIn: `<svg
  height="16"
  width="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><title>LinkedIn</title><path
    fill="currentColor"
    d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
  ></path></svg
>`,
	X: `<svg
  width="16"
  height="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><title>X</title><path
    fill="currentColor"
    d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"
  ></path></svg
>
`,
};

const profilesInfo = profiles.map(({ network, url }) => {
	const icon = SOCIAL_ICONS[network];
	const firstLetter = network[0].toUpperCase();

	return {
		id: network,
		section: "Social",
		title: `Visit ${network}`,
		url,
		icon,
		hotkey: `ctrl+${firstLetter}`,
	};
});
---

<footer id="normal-footer" class="no-print flex flex-col gap-2 text-command-palette-text">
  <div class="command-palette-text">
    Press <kbd>Cmd</kbd> + <kbd>K</kbd> to open the command palette.
  </div>
</footer>

<div class="footer-button no-print">
	<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-command" width="32" height="32" viewBox="0 0 24 24" stroke-width="1.5" stroke="#777" fill="none" stroke-linecap="round" stroke-linejoin="round">
		<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
		<path d="M7 9a2 2 0 1 1 2 -2v10a2 2 0 1 1 -2 -2h10a2 2 0 1 1 -2 2v-10a2 2 0 1 1 2 2h-10"></path>
	</svg>
</div>

<div id="hotkeypad" 
  data-placeholder="Search Command" 
  data-info={JSON.stringify(profilesInfo)}
  data-email={basics.email}
  data-name={basics.name}
></div>

<script>
	interface Info {
		id: string;
		section: string;
		title: string;
		url: string;
		icon: string;
		hotkey: string;
		handler?: () => void;
	}

	import HotKeyPad from "hotkeypad";

	const hotkeypad = new HotKeyPad();
	const hotkeypadElement = hotkeypad.instance;
	const info = hotkeypadElement.getAttribute("data-info") ?? "[]";
	const parsedInfo = JSON.parse(info) as Info[];
	const email = hotkeypadElement.getAttribute("data-email") ?? "";
	const name = hotkeypadElement.getAttribute("data-name") ?? "";

	const data = parsedInfo.map(({ url, hotkey, icon, id, section, title }) => {
		return {
			id,
			title,
			icon,
			hotkey,
			section,
			handler: () => {
				window.open(url, "_blank");
			},
		};
	});
	hotkeypad.setCommands([
		{
			id: "download-pdf",
			title: "Download PDF Resume",
			icon: `<svg style="margin-right: 8px" width="16" height="16" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
</svg>`,
			hotkey: "ctrl+D",
			section: "Actions",
			handler: () => {
				window.open('/resume.pdf', '_blank');
			},
		},
		{
			id: "goto-experience",
			title: "Go to Experience",
			icon: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-briefcase"><rect width="20" height="14" x="2" y="7" rx="2" ry="2"/><path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"/></svg>`,
			hotkey: "ctrl+E",
			section: "Navigation",
			handler: () => {
				scrollToSection('experience');
			},
		},
		{
			id: "goto-skills",
			title: "Go to Skills",
			icon: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-code"><polyline points="16 18 22 12 16 6"/><polyline points="8 6 2 12 8 18"/></svg>`,
			hotkey: "ctrl+S",
			section: "Navigation",
			handler: () => {
				scrollToSection('skills');
			},
		},
		{
			id: "goto-education",
			title: "Go to Education",
			icon: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-graduation-cap"><path d="M22 10v6M2 10l10-5 10 5-10 5z"/><path d="M6 12v5c3 3 9 3 12 0v-5"/></svg>`,
			hotkey: "ctrl+U",
			section: "Navigation",
			handler: () => {
				scrollToSection('education');
			},
		},
		{
			id: "goto-projects",
			title: "Go to Projects",
			icon: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-folder"><path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"/></svg>`,
			hotkey: "ctrl+P",
			section: "Navigation",
			handler: () => {
				scrollToSection('projects');
			},
		},
		{
			id: "connect-with-me",
			title: "Connect with me",
			icon: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mail"><rect width="20" height="16" x="2" y="4" rx="2"></rect><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path></svg>`,
			hotkey: "ctrl+C",
			section: "Social",
			handler: () => {
				window.location.href = `mailto:${email}?subject=Connection%20Request&body=Hello%20Rumi,%0D%0A%0D%0AMy%20name%20is%20[your%20name].%20I%20wanted%20to%20reach%20out%20because%20[your%20reason%20for%20wanting%20to%20connect].%0D%0A%0D%0ABest,%0D%0A[your%20name]`;
			},
		},
		...data,
	]);

	function scrollToSection(sectionId: string) {
		const section = document.getElementById(sectionId);
		if (section) {
			const yOffset = -60; // Adjust this value to account for any fixed headers
			const y = section.getBoundingClientRect().top + window.pageYOffset + yOffset;
			window.scrollTo({top: y, behavior: 'smooth'});
		}
	}

	const footerButtons = document.querySelectorAll(".footer-button");
	footerButtons.forEach((button) => {
		button.addEventListener("click", () => {
			var event = new KeyboardEvent("keydown", {
				key: "K",
				code: "KeyK",
				keyCode: 75,
				which: 75,
				ctrlKey: true,
				altKey: false,
				shiftKey: false,
				metaKey: false,
			});
			document.dispatchEvent(event);
		});
	});
</script>

<style>
	@keyframes fadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	@media (min-width: 601px) {
		.footer-button {
			display: none;
		}
	}

	@media (max-width: 600px) {
		#normal-footer {
			display: none;
		}

		.footer-button {
			background: #fff;
			position: fixed;
			border: 1px solid #eee;
			right: 10px;
			bottom: 10px;
			width: 50px;
			height: 50px;
			border-radius: 50%;
			display: flex;
			align-items: center;
			justify-content: center;
			cursor: pointer;
		}
	}

	footer {
		@apply bg-skin-button-accent;
		position: fixed;
		bottom: 0px;
		width: 100%;
		padding-block: 8px;
		text-align: center;
		font-size: 0.85rem;

		view-timeline-name: --revealing;
		view-timeline-axis: block;

		animation: linear 0.3s fadeIn;
		animation-timeline: --revealing;
		animation-range: entry 100% cover 10%;

		/* Add transparency and blur here */
		background-color: rgba(var(--color-button-accent), 0.6);
		backdrop-filter: blur(8px);
		-webkit-backdrop-filter: blur(8px); /* For Safari */
	}
	kbd {
		@apply bg-skin-muted;
		border-radius: 4px;
		padding: 2px 4px;
		font-size: 12px;
	}
	#hotkeypad {
		--hotkeypad-bg-kbd: rgb(var(--muted));
		--hotkeypad-bg-backdrop: rgba(var(--color-fill), 0.8);
		--hotkeypad-bg-container: rgba(var(--color-fill), 0.9);
		--hotkeypad-bg-item-hover: rgba(var(--color-text), 20%);
		--hotkeypad-border-container: rgb(var(--muted));
		--hotkeypad-border-container-hover: rgb(var(--color-fill));
		--hotkeypad-fg-muted: rgb(var(--muted));
		@media (prefers-color-scheme: dark) {
			--hotkeypad-bg-kbd: rgb(var(--muted));
			--hotkeypad-bg-backdrop: rgba(var(--color-fill), 0.8);
			--hotkeypad-bg-container: rgba(var(--color-fill), 0.9);
			--hotkeypad-bg-item-hover: rgba(var(--color), 10%);
			--hotkeypad-border-container: rgb(var(--muted));
			--hotkeypad-border-container-hover: rgb(var(--color-fill));
			--hotkeypad-fg-muted: rgb(var(--color-text-base));
		}
	}
	#hotkeypad [data-container] {
		background: linear-gradient(
			to bottom,
			rgba(var(--color-fill), 0.2) 0%,
			rgba(var(--color-fill), 0.6) 30%,
			rgba(var(--color-fill), 0.9) 100%
		);
		backdrop-filter: blur(16px);
		-webkit-backdrop-filter: blur(16px);
	}

	#hotkeypad [data-item] {
		background-color: rgba(var(--color-fill), 0.6);
		backdrop-filter: blur(8px);
		-webkit-backdrop-filter: blur(8px);
	}
	.text-command-palette-text,
	.command-palette-text {
		color: rgb(var(--color-command-palette-text));
	}
</style>